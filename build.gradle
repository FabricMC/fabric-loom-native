plugins {
	id "java-library"
    id "maven-publish"
    id "com.diffplug.spotless"  version "6.25.0" apply false
    id "de.undercouch.download" version "5.5.0"  apply false
}

def ENV = System.getenv()
version = "0.2.1" + (ENV.GITHUB_ACTIONS ? "" : "+local")

allprojects {
    apply plugin: 'com.diffplug.spotless'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

spotless {
    lineEndings = com.diffplug.spotless.LineEnding.UNIX

    java {
        licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
        removeUnusedImports()
        importOrder('java', 'javax', '', 'net.fabricmc')
        indentWithTabs()
        trimTrailingWhitespace()
    }
}

def architectures = [
    "X86",
    "X86-64",
    "Aarch64"
]

evaluationDependsOn(":windows")

def collectDlls = tasks.register("collectDlls", Sync) {
    architectures.forEach { arch ->
        from(project(":windows").tasks.named("linkRelease${arch}").get().linkedFile) {
            into "fabric-loom-native/" + arch.toLowerCase()
        }
    }

    rename { fileName ->
        "fabric-loom-native.dll"
    }

    into layout.buildDirectory.dir("dlls")
}

sourceSets.main.resources.srcDir collectDlls

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        create("maven", MavenPublication) {
            groupId "net.fabricmc"
            artifactId "fabric-loom-native"
            version project.version

            from components.java

            // Include the PDB files in case someone wants to debug
            architectures.forEach { arch ->
                def dll = project(":windows").tasks.named("linkRelease${arch}").get().linkedFile
                def pdb = dll.getAsFile().map { file -> new File(file.absolutePath.replace(".dll", ".pdb")) }
                artifact(pdb) {
                    classifier arch.toLowerCase()
                    extension "pdb"
                }
            }
        }
    }

    repositories {
        if (ENV.MAVEN_URL) {
            maven {
                url ENV.MAVEN_URL
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}